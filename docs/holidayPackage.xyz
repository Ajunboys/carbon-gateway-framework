@Description "Travelpedia flight, hotel and car rental services"
@Path "/web"
package com.classic.travel

constant endpoint hotelEP = “http://expedia.com/blah”;
constant endpoint carRentalEP = new URL (..); // can be overriden from outside by setting com.classic.travel.carRentalEP
constant int port = 8290

message x;

// if payload is JSON already
JSON jm = JSON.bind (x.payload);
JSON jm = JSON.bind (x.payload, “{\”type\” : \”string\” …}”);
JSON jm = JSON.bind (x.payload, “json-schema-type-name”, “JSON schema file”);

// if payload is XML already
XML xm = XML.bind (x.payload);
…

// JSON accessors
int i = jm.get (“a.b.c”);
JSON j = jm.get (“a.b[1].gg”);
jm.set (“a.b.c”, i);
jm.set (“a.b[1].gg”, j);

// XML accessors
int i = xm.get (“/a/b[3]/@foo”);
XML x = xm.get (“/a/b”);

@Description "Return flight details"
@Path "/flights?depart={dateDepart}&return={dateReturn}&from={from}&to={to}" 
@Methos "GET"
resource flights (message m) {
	message c = datamap("request.jschema", "getFlights.jschema", "getFlightsMapping.js", m);
	int sid = sendTo(airlineEP, c);
	message r = receiveFrom(airlineEP, sid);
	return r;
}

@Description "Return hotel details"
@Path "/hotels?from={dateFrom}&to={dateTo}&location={location}"
@Methods "GET"
resource hotels (message m) {
    message c = datamap("request.jschema", "getHotels.jschema", "getHotelsMapping.js", m);
    int sid = sendTo(hotelEP, c);
    message r = receiveFrom(hotelEP, sid);
    return r;
}

@Description "Return car rental info"
@Path "/rentals?from={dateFrom}&to={dateTo}&type={type}"
@Method "GET"
resource cars (message m) {
    message c = datamap("request.jschema","getRentalCars.jschema", "getRentalCarsMapping.js", m);
    int sid = sendTo(carRentalEP, c);
    message r = receiveFrom(carRentalEP, sid);
    return r;
}
 
@Description "Book holiday package; flight, hotel & rental car"
@Path"/book?from={dateFrom}&to={dateTo}"
@Method "POST"
resource bookPackage (message m) {
    string location = eval("$.request.holiday.location", m);
    booked, flightBookingRef = bookAirline($location, $dateFrom, $dateTo, $airlineEP, m);

    if ($booked) {
        handle hotelWorker = start (worker (message m) {
            message c = datamap("holiday-package.jschema", "get-hotels.jschema", "nearby-hotels.js", m);
            int sid = sendTo(hotelEP, c);
            message r = receiveFrom(hotelEP, sid);

            // Query each hotel for price and availability
            int lowestCost = 0
            message hotel;

            foreach (message h : eval("$.hotels", r)) {
                message c1 = datamap("hotel.jschema","query-hotel.jschema", "hotel.js", h);
                int sid1 = sendTo(hotelEP, c1);
                message r1 = receiveFrom(hotelEP, sid1);

                if (lowestCost == 0) {
                    lowestCost = eval("$.hotel.cost", r1)
                    hotel = eval("$.hotel", r1)
                }
                if (eval("$.hotel.cost", r1) < lowestCost) {
                    lowestCost = eval("$.hotel.cost", r1)
                    hotel = eval("$.hotel", r1)
                }
            }

            message c2 = datamap(new JsonSchema($hotel), "book-hotel.jschema", "book-hotel.js", m);
            int sid2 = sendTo(hotelEP, c2);
            message r2 = receiveFrom(hotelEP, sid2);
            return r2;

        }, m);

        //sendTo (hotelWorker, m);
        message c1 = datamap("holiday-package.jschema", "car-rental.jschema", "rental.js", m);
        fork getCar (c1) {
            worker [getHertzCars] (message x) {
                // retrieve rental cars available from Hertz rent-a-car
                message c2 = datamap("car-rental.jschema", "hertz.jschema", "hertzMapping.js", x);
                int sid = sendTo(carRentalEP, x);
                message r = receiveFrom(carRentalEP, sid);
                message c3 = datamap("hertz.jschema", "car-rental.jschema", "hertzMapping.js", r);
                return c3;
            }

            worker [getEnterpriseCars] (message y) {
                // retrieve rental cars available from Hertz rent-a-car
                message c2 = datamap("car-rental.jschema", "enterprise.jschema", "enterpriseMapping.js", y);
                int sid = sendTo(carRentalEP, y);
                message r = receiveFrom(carRentalEP, sid);
                message c3 = datamap("enterprise.jschema", "car-rental.jschema", "enterpriseMapping.js", r);
                return c3;
            }
        }

        log("Retrieving available vehicles from Partners");
        message[] c2 = join{ getCar, any }
        message c3 = datamap("car-rental.jschema", "book-car-rental.jschema", "rental.js", c2[0]);
        int sid = sendTo(carRentalEP, c3);
        message r = receiveFrom(carRentalEP, sid);
        return r;
               
        message r2 = getResult(hotelWorker);
        message hotelResponse = eval("$", r2);
        message c1 = datamap(new InputSchema($flightBookingRef, $hotelResponse, $carRentalResponse), "response.jschema", new MappingConfig("response.js"), r2);
        return c1;
    }
    else {
        message c1 = datamap("holiday-package.jscema", "flight-unavailable.jschema", "unavailable.js", m);
        return c1;
    }
}

